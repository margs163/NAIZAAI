import json
from datetime import datetime, timedelta
from typing import List, Dict, Any
import random

class SocialMediaPlanGenerator:
    def __init__(self):
        self.platforms = {
            'instagram': {
                'optimal_times': ['09:00', '12:00', '17:00', '20:00'],
                'max_daily_posts': 2,
                'hashtag_limit': 30,
                'video_length': (15, 60),
                'engagement_peak_days': ['Tuesday', 'Wednesday', 'Thursday']
            },
            'tiktok': {
                'optimal_times': ['06:00', '10:00', '16:00', '19:00'],
                'max_daily_posts': 3,
                'hashtag_limit': 10,
                'video_length': (15, 60),
                'engagement_peak_days': ['Monday', 'Tuesday', 'Friday']
            },
            'youtube_shorts': {
                'optimal_times': ['14:00', '18:00', '21:00'],
                'max_daily_posts': 1,
                'hashtag_limit': 15,
                'video_length': (15, 60),
                'engagement_peak_days': ['Saturday', 'Sunday', 'Wednesday']
            }
        }
        
        self.content_themes = {
            'learning_breakthrough': {
                'caption_templates': [
                    "–ö–æ–≥–¥–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –Ω–∞–∫–æ–Ω–µ—Ü '—â–µ–ª–∫–Ω—É–ª–∞'! üß†‚ú® {subject} {hashtags}",
                    "–≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–∑–∞—Ä–µ–Ω–∏—è —Å—Ç–æ–∏—Ç —Ç—ã—Å—è—á–∏ —Å–ª–æ–≤! üí° {subject} {hashtags}",
                    "–°–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –Ω–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏! üí™ {subject} {hashtags}"
                ],
                'hashtags': ['#–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '#–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '#–æ–∑–∞—Ä–µ–Ω–∏–µ', '#–æ–±—É—á–µ–Ω–∏–µ', '#azgroup']
            },
            'student_engagement': {
                'caption_templates': [
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞! üôã‚Äç‚ôÄÔ∏è {subject} {hashtags}",
                    "–ö–æ–≥–¥–∞ —É—Ä–æ–∫ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –¥–∏—Å–∫—É—Å—Å–∏—é! üó£Ô∏è {subject} {hashtags}",
                    "–ù–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ –Ω–µ –±–æ—è—Ç—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! ‚ùì {subject} {hashtags}"
                ],
                'hashtags': ['#–∞–∫—Ç–∏–≤–Ω–æ–µ–æ–±—É—á–µ–Ω–∏–µ', '#—É—á–µ–Ω–∏–∫–∏', '#–≤–æ–ø—Ä–æ—Å—ã', '#–¥–∏—Å–∫—É—Å—Å–∏—è', '#azgroup']
            },
            'teaching_methods': {
                'caption_templates': [
                    "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º! üé® {subject} {hashtags}",
                    "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —É—Ä–æ–∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º? üé≠ {subject} {hashtags}",
                    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏! üöÄ {subject} {hashtags}"
                ],
                'hashtags': ['#–º–µ—Ç–æ–¥—ã–æ–±—É—á–µ–Ω–∏—è', '#–∫—Ä–µ–∞—Ç–∏–≤', '#—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '#azgroup']
            }
        }
    
    def generate_publication_plan(self, highlights: List[Dict], days_ahead: int = 14) -> Dict[str, Any]:
        """
        Generate a comprehensive publication plan for extracted highlights
        
        Args:
            highlights: List of highlight segments with metadata
            days_ahead: Number of days to plan ahead
        
        Returns:
            Comprehensive publication plan
        """
        publication_plan = {
            'plan_created': datetime.now().isoformat(),
            'planning_period': f"{days_ahead} days",
            'total_highlights': len(highlights),
            'platforms': {},
            'weekly_themes': self._generate_weekly_themes(),
            'content_calendar': self._create_content_calendar(highlights, days_ahead),
            'performance_tracking': self._setup_tracking_metrics(),
            'content_optimization': self._generate_optimization_suggestions(highlights)
        }
        
        # Generate platform-specific plans
        for platform in self.platforms.keys():
            publication_plan['platforms'][platform] = self._generate_platform_plan(
                highlights, platform, days_ahead
            )
        
        return publication_plan
    
    def _create_content_calendar(self, highlights: List[Dict], days_ahead: int) -> List[Dict]:
        """Create a day-by-day content calendar"""
        calendar = []
        start_date = datetime.now().date()
        
        # Distribute highlights across platforms and days
        highlight_queue = highlights.copy()
        random.shuffle(highlight_queue)
        
        for day_offset in range(days_ahead):
            current_date = start_date + timedelta(days=day_offset)
            day_name = current_date.strftime('%A')
            
            day_plan = {
                'date': current_date.isoformat(),
                'day_name': day_name,
                'posts': {},
                'total_posts': 0
            }
            
            # Schedule posts for each platform based on optimal days
            for platform, settings in self.platforms.items():
                if day_name in settings['engagement_peak_days'] and highlight_queue:
                    posts_for_today = min(
                        settings['max_daily_posts'],
                        len(highlight_queue),
                        2 if day_offset < 7 else 1  # More frequent posting in first week
                    )
                    
                    day_plan['posts'][platform] = []
                    
                    for _ in range(posts_for_today):
                        if highlight_queue:
                            highlight = highlight_queue.pop(0)
                            post_time = random.choice(settings['optimal_times'])
                            
                            post_plan = self._create_post_plan(highlight, platform, post_time)
                            day_plan['posts'][platform].append(post_plan)
                            day_plan['total_posts'] += 1
            
            calendar.append(day_plan)
        
        return calendar
    
    def _create_post_plan(self, highlight: Dict, platform: str, post_time: str) -> Dict:
        """Create detailed plan for individual post"""
        theme = highlight.get('segment_theme', 'learning_breakthrough')
        theme_key = self._map_theme_to_category(theme)
        
        # Generate caption
        template = random.choice(self.content_themes[theme_key]['caption_templates'])
        hashtags = ' '.join([f"#{tag}" for tag in self.content_themes[theme_key]['hashtags'][:10]])
        
        subject = highlight.get('subject', '—É—Ä–æ–∫')
        caption = template.format(subject=subject, hashtags=hashtags)
        
        # Add platform-specific optimizations
        if platform == 'tiktok':
            caption += "\n\n#fyp #viral #education #russia"
        elif platform == 'instagram':
            caption += f"\n\nüìö –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ @azgroup_education"
        
        return {
            'highlight_id': highlight.get('id', ''),
            'timestamp': highlight.get('extended_segment', ''),
            'post_time': post_time,
            'caption': caption,
            'hashtags': hashtags.split(),
            'expected_length': f"{highlight.get('duration', 30)}s",
            'editing_notes': self._generate_editing_notes(highlight, platform),
            'engagement_strategy': self._generate_engagement_strategy(theme_key, platform)
        }
    
    def _generate_editing_notes(self, highlight: Dict, platform: str) -> List[str]:
        """Generate editing suggestions for the highlight"""
        notes = []
        
        # Platform-specific editing notes
        if platform == 'tiktok':
            notes.extend([
                "–î–æ–±–∞–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–≤–µ—Ä–ª–µ–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤",
                "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—É—é –º—É–∑—ã–∫—É (—Å–æ–±–ª—é–¥–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞)"
            ])
        elif platform == 'instagram':
            notes.extend([
                "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –æ–±–ª–æ–∂–∫—É",
                "–î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è accessibility",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            ])
        
        # Content-specific notes
        if 'breakthrough' in highlight.get('segment_theme', ''):
            notes.append("–í—ã–¥–µ–ª–∏—Ç—å –º–æ–º–µ–Ω—Ç –æ–∑–∞—Ä–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞")
        if 'engagement' in highlight.get('segment_theme', ''):
            notes.append("–ü–æ–∫–∞–∑–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É—á–∏—Ç–µ–ª—è –∏ —É—á–µ–Ω–∏–∫–∞")
        
        return notes
    
    def _generate_engagement_strategy(self, theme: str, platform: str) -> Dict:
        """Generate engagement strategy for the post"""
        strategies = {
            'learning_breakthrough': {
                'call_to_action': "–ê –∫–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç? üí≠",
                'questions': ["–ü–æ–º–Ω–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏?"],
                'interaction_hooks': ["–ü–æ—Å—Ç–∞–≤—å—Ç–µ ‚ù§Ô∏è –µ—Å–ª–∏ —Ç–æ–∂–µ –ª—é–±–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É!"]
            },
            'student_engagement': {
                'call_to_action': "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –æ–±—É—á–µ–Ω–∏—è! üìö",
                'questions': ["–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å?"],
                'interaction_hooks': ["–û—Ç–º–µ—Ç—å—Ç–µ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —É—Ä–æ–∫–∞—Ö!"]
            }
        }
        
        base_strategy = strategies.get(theme, strategies['learning_breakthrough'])
        
        return {
            'post_timing': '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
            'engagement_tactics': base_strategy,
            'follow_up_actions': [
                "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ø–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞",
                "–õ–∞–π–∫–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                "–î–µ–ª–∏—Ç—å—Å—è –≤ Stories —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
            ]
        }
    
    def _generate_weekly_themes(self) -> Dict:
        """Generate weekly content themes"""
        return {
            'week_1': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è',
            'week_2': '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            'week_3': '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è',
            'week_4': '–£—Å–ø–µ—Ö–∏ —É—á–µ–Ω–∏–∫–æ–≤'
        }
    
    def _setup_tracking_metrics(self) -> Dict:
        """Setup metrics for tracking content performance"""
        return {
            'kpis': {
                'reach': '–û—Ö–≤–∞—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
                'engagement_rate': '–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏',
                'saves': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
                'shares': '–†–µ–ø–æ—Å—Ç—ã',
                'comments': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
                'profile_visits': '–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å'
            },
            'tracking_schedule': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
            'optimization_triggers': [
                '–ù–∏–∑–∫–∏–π –æ—Ö–≤–∞—Ç (<1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)',
                '–ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (<3%)',
                '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'
            ]
        }
    
    def _generate_optimization_suggestions(self, highlights: List[Dict]) -> List[str]:
        """Generate suggestions for content optimization"""
        return [
            "A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã",
            "–°–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Ä–∏–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö highlights",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"
        ]
    
    def _map_theme_to_category(self, theme: str) -> str:
        """Map highlight theme to content category"""
        theme_lower = theme.lower()
        if 'breakthrough' in theme_lower or '–ø–æ–Ω–∏–º–∞–Ω–∏–µ' in theme_lower:
            return 'learning_breakthrough'
        elif 'engagement' in theme_lower or '—É—á–∞—Å—Ç–∏–µ' in theme_lower:
            return 'student_engagement'
        else:
            return 'teaching_methods'
    
    def _generate_platform_plan(self, highlights: List[Dict], platform: str, days_ahead: int) -> Dict:
        """Generate detailed plan for specific platform"""
        return {
            'total_posts_planned': len([h for h in highlights if self._should_post_on_platform(h, platform)]),
            'optimal_posting_times': self.platforms[platform]['optimal_times'],
            'content_strategy': f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {platform}",
            'hashtag_strategy': self._generate_hashtag_strategy(platform),
            'expected_metrics': self._estimate_performance_metrics(platform, len(highlights))
        }
    
    def _should_post_on_platform(self, highlight: Dict, platform: str) -> bool:
        """Determine if highlight should be posted on specific platform"""
        # Simple logic - can be made more sophisticated
        duration = highlight.get('duration', 30)
        min_duration, max_duration = self.platforms[platform]['video_length']
        return min_duration <= duration <= max_duration
    
    def _generate_hashtag_strategy(self, platform: str) -> Dict:
        """Generate hashtag strategy for platform"""
        general_hashtags = ['#azgroup', '#–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '#–æ–±—É—á–µ–Ω–∏–µ', '#—à–∫–æ–ª–∞']
        
        platform_specific = {
            'instagram': ['#reels', '#education', '#learning', '#russia'],
            'tiktok': ['#fyp', '#viral', '#eduktok', '#russia'],
            'youtube_shorts': ['#shorts', '#education', '#learning']
        }
        
        return {
            'always_include': general_hashtags,
            'platform_specific': platform_specific.get(platform, []),
            'trending': '–î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
            'limit': self.platforms[platform]['hashtag_limit']
        }
    
    def _estimate_performance_metrics(self, platform: str, num_highlights: int) -> Dict:
        """Estimate expected performance metrics"""
        base_metrics = {
            'instagram': {'avg_views': 2000, 'engagement_rate': 0.05},
            'tiktok': {'avg_views': 5000, 'engagement_rate': 0.08},
            'youtube_shorts': {'avg_views': 3000, 'engagement_rate': 0.04}
        }
        
        platform_metrics = base_metrics.get(platform, base_metrics['instagram'])
        
        return {
            'estimated_total_views': platform_metrics['avg_views'] * num_highlights,
            'estimated_engagement_rate': platform_metrics['engagement_rate'],
            'estimated_new_followers': num_highlights * 10,
            'performance_benchmark': '–°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏'
        }

# Example usage
def generate_plan_for_highlights(highlights_data):
    """
    Example function showing how to use the plan generator
    
    highlights_data should be a list of dictionaries with highlight information
    """
    planner = SocialMediaPlanGenerator()
    
    # Example highlight data structure
    example_highlights = [
        {
            'id': 'highlight_1',
            'extended_segment': '10:15-11:00',
            'segment_theme': 'learning_breakthrough',
            'duration': 45,
            'subject': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            'confidence': 0.85
        },
        # Add more highlights...
    ]
    
    plan = planner.generate_publication_plan(example_highlights, days_ahead=14)
    
    # Save plan to file
    with open('social_media_plan.json', 'w', encoding='utf-8') as f:
        json.dump(plan, f, ensure_ascii=False, indent=2)
    
    print("Publication plan generated successfully!")
    return plan

if __name__ == "__main__":
    # Test the system
    test_highlights = [
        {
            'id': 'highlight_1',
            'extended_segment': '10:15-11:00',
            'segment_theme': 'learning_breakthrough',
            'duration': 45,
            'subject': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            'confidence': 0.85
        }
    ]
    
    plan = generate_plan_for_highlights(test_highlights)
    print(json.dumps(plan, ensure_ascii=False, indent=2))